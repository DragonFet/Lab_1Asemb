#include <immintrin.h>
#include <iostream>
#include <iomanip>
#include <cstring>
double compare_avx(double x) {
    unsigned int z;
    asm (
            "movsd %1, %%xmm1\n"//перемещение значения аргумента функции x в регистр xmm1 с помощью команды ассемблера movsd.
            "movsd .LC0(%%rip), %%xmm0\n"//загрузка константы 3.0 в регистр xmm0 с помощью команды ассемблера movsd.
            "vcomisd %%xmm1, %%xmm0\n"//сравнение значений в регистрах xmm0 и xmm1 с помощью команды ассемблера vcomisd.
            "setne %%al\n"//установка флага ZF в 1, если значения не равны, с помощью команды ассемблера setne.
            "movzbl %%al, %%eax\n"//расширение младшего байта регистра al до размера eax с помощью команды ассемблера movzbl.
            "mov %%eax, %0\n"//перемещение значения из регистра eax в переменную z с помощью команды ассемблера mov.
            : "=r" (z)//указание выходного операнда в виде переменной z, которая будет доступна для использования в C++ коде после выполнения ассемблерного кода.
            : "m" (x)// указание входного операнда в виде переменной x, которая будет доступна для использования в ассемблерном коде.
            : "%xmm0", "%xmm1", "%al", "%eax"//указание списка регистров, которые будут использоваться в ассемблерном коде.
            );
    return z;
}

int zd_10() {
    double x = 5;
    double res = compare_avx(x);
    std::cout << "Result: " << res << std::endl;
    return 0;
}
